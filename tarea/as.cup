package ett;
import java_cup.runtime.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import javax.swing.*;
import java.util.*;

parser code {:

    /*
    Se declaran las variables y constantes que se usarán al transcurso
    de la ejecución del programa.
    */
    private JFrame mainFrame;
    private DrawPanel dibujo;
    private ArrayList<Instruccion> instrucciones;
    private Hashtable<Integer,Object> memoria;
    private final Integer escala = 56;

    
    /*  
    Se crea una clase para la creación de objetos 
    que definirán las instrucciones de dibujado 
    */
    
    public class Instruccion{
        String tipo; //color / posicion / linea

        //color
        String color;

        //posicion
        Integer x;
        Integer y;

        //linea
        String direccion; //arriba / abajo / izquierda / derecha
        Integer largo;
        
        public Instruccion(String color) {
            this.tipo = "color";
            this.color = color;
        }

        public Instruccion(Integer x, Integer y) {
            this.tipo = "posicion";
            this.x = x;
            this.y = y;
        }

        public Instruccion(String direccion, Integer largo) {
            this.tipo = "linea";
            this.direccion = direccion;
            this.largo = largo;
        }

    }

    public class DrawPanel extends JPanel{
        
        /*  Genera panel gráfico para dibujar las lineas de las instrucciones ingresadas    */
        
        public void paintComponent(Graphics g) {
            super.paintComponent(g);

            Graphics2D g2d = (Graphics2D)g;
            
            /*  
            Se guarda la posición origen para ser hacer que la instruccion POS funcione
            con valores absolutos y no relativos   
            */
            
            AffineTransform origen = g2d.getTransform();

            /*  Recorre las instrucciones guardadas para dibujarlas en el panel en el orden que corresponda  */
            
            for (Instruccion i:instrucciones) {
                switch (i.tipo) {
                    case "color":       //  Se establece el color para el dibujado de trazos
                    {
                        switch (i.color)
                        {
                            case "rojo":
                            {
                                g.setColor(new Color(255, 0, 0));
                                break;
                            }
                            case "amarillo":
                            {
                                g.setColor(new Color(255, 255, 0));
                                break;
                            }
                            case "verde":
                            {
                                g.setColor(new Color(0, 255, 0));
                                break;
                            }
                            case "blanco":
                            {
                                g.setColor(new Color(255, 255, 255));
                                break;
                            }
                            case "azul":
                            {
                                g.setColor(new Color(0, 0, 255));
                                break;
                            }
                            default:
                                break;
                        }
                        break;
                    }
                    case "posicion":    //  Se redefine el origen para posicionar un nuevo objeto a dibujar en el panel 
                                        //  según las coordenadas ingresadas.
                    {                   //  Escala definida es a pixel
                        g2d.setTransform(origen);
                        g.translate(i.x, i.y);
                        break;
                    }
                    case "linea":       //  Define la dirección del trazo a dibujar en el panel con su largo y dirección
                    {                   //  Escala definida es a centímetros (1 pixel =~ 56 centimetros) (Resolucion 1920x1080, 15.6")
                        switch (i.direccion) {
                            case "izquierda":
                            {
                                g.drawLine(0, 0, -i.largo * escala, 0);
                                g.translate(-i.largo * escala, 0);
                                break;
                            }
                            case "derecha":
                            {
                                g.drawLine(0, 0, i.largo * escala, 0);
                                g.translate(i.largo * escala, 0);
                                break;
                            }
                            case "abajo":
                            {
                                g.drawLine(0, 0, 0, i.largo * escala);
                                g.translate(0, i.largo * escala);
                                break;
                            }
                            case "arriba":
                            {
                                g.drawLine(0, 0, 0, -i.largo * escala);
                                g.translate(0, i.largo * escala);
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
    
    
    /*  Manejo de errores para símbolos incorrectos, entregando un mensaje en pantalla */
    
    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/*  
Sección que determina los terminales de la gramática a usar que
vienen definidos desde el Analizador Léxico.
*/
terminal    POS, IZQ, DER, ARR, ABA, DAVALOR, COLOR, EDITAR, TERMINO, LPAREN, RPAREN, COMMA, EQUAL;
terminal String C;
terminal Integer ID, DIGITO;
   


/*  Sección que establece las variables asociadas a la grámatica */
non terminal Object I, A, S, B, N, D;



/*  Comienzo de la gramática y ejecución de la traducción dirigida por sintaxis    */

    /*  Producción S-> EDITAR A TERMINO   */
    /*  Ademas de dar comienzo a la gramática para la serie de instrucciones, permite cargar la interfaz gráfica e inicializar algunos componentes   */
   S ::= 
        {: 
        mainFrame = new JFrame("ETT");
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
        mainFrame.setSize(1440, 900);
        memoria = new Hashtable<Integer, Object>();
        instrucciones = new ArrayList<Instruccion>(); 
        dibujo = new DrawPanel();
        mainFrame.add(dibujo);
        mainFrame.setVisible(true);
         :}
        EDITAR
         A TERMINO
        ;
    
    /*  Producción A-> A I | I */
    
   A ::= A I
        |
        I
        ;
    
    /*  Producción I-> POS(X,Y) | IZQ(D) | DER(D) | ARR(D) | ABA(D) | DAVALOR ID=N | COLOR(B) */
    /*  
    Permite ingresar a una lista los objetos de tipo Instruccion, 
    las instrucciones capturadas en pantalla, también guarda 
    en tabla hash terminales de tipo enteros, además de dibujar 
    las lineas de las instrucciones ingresadas   
    */
    
    I ::= POS LPAREN N:X COMMA N:Y 
            {:
            instrucciones.add(new Instruccion((Integer)X,(Integer)Y));      // Se genera un objeto de la clase "Instruccion" la cual es almacenada en la lista "instrucciones"
            :}
            RPAREN
          |
          IZQ LPAREN D:L  
            {: 
            instrucciones.add(new Instruccion("izquierda",(Integer)L));      // Se genera un objeto de la clase "Instruccion" la cual es almacenada en la lista "instrucciones"
            dibujo.repaint();   // Se le dice al panel del dibujado a repintar con la nueva instrucción
            :}
            RPAREN
          |
          DER LPAREN D:L  
            {:
            instrucciones.add(new Instruccion("derecha",(Integer)L));      // Se genera un objeto de la clase "Instruccion" la cual es almacenada en la lista "instrucciones"
            dibujo.repaint();   // Se le dice al panel del dibujado a repintar con la nueva instrucción
            :} 
            RPAREN
          |
          ABA LPAREN D:L  
            {: 
            instrucciones.add(new Instruccion("abajo",(Integer)L));      // Se genera un objeto de la clase "Instruccion" la cual es almacenada en la lista "instrucciones"
            dibujo.repaint();   // Se le dice al panel del dibujado a repintar con la nueva instrucción
            :}
            RPAREN
          |
          ARR LPAREN D:L 
            {: 
            instrucciones.add(new Instruccion("arriba",(Integer)L));      // Se genera un objeto de la clase "Instruccion" la cual es almacenada en la lista "instrucciones"
            dibujo.repaint();   // Se le dice al panel del dibujado a repintar con la nueva instrucción
            :} 
            RPAREN
          |
          DAVALOR ID:ID EQUAL N:N 
            {: 
            memoria.put((Integer)ID, N); // Se guarda el valor obtenido N en la tabla segun el ID obtenido.
            :}
          |
          COLOR LPAREN B:C  
            {: 
            instrucciones.add(new Instruccion((String)C));      // Se genera un objeto de la clase "Instruccion" la cual es almacenada en la lista "instrucciones"
            dibujo.repaint();   // Se le dice al panel del dibujado a repintar con la nueva instrucción
            :} 
            RPAREN
          ;
    
    /*  Producción D-> ID | D   */
    /*  Permite tener acceso a los terminales para las instrucciones de dirreción  */
    
    D ::= ID:ID
          {: 
          RESULT = memoria.get(ID); // Se busca el valor guardado por el campo ID en la tabla
          :}
          |
          DIGITO:D
          {: 
          RESULT = D; // Se retorna el valor numerico obtenido
          :}
          ;

    /*  Producción B-> ID | C   */
    /*  Permite tener acceso a los terminales para la instruccion de color  */ 
    
    B ::= C:C
          {: 
          RESULT = C;  // Se retorna el color obtenido como string obtenido
          :}
          |
          ID:ID
          {: 
          RESULT = memoria.get(ID); // Se busca el valor guardado por el campo ID en la tabla
          :} 
          ;
    
    /*  Producción N-> ID | DIGITO | C  */
    /*  
    Permite tener acceso a los terminales para la instruccion 
    de DAVALOR, donde esta instrucción permite generar variables 
    que contengan valores  
    */
    
    N ::= ID:ID
          {: 
          RESULT = memoria.get(ID); // Se busca el valor guardado por el campo ID en la tabla
          :}
          |
          DIGITO:D
          {: 
          RESULT = D;  // Se retorna el valor numerico obtenido
          :}
          |
          C:C
          {: 
          RESULT = C; // Se retorna el color obtenido como string obtenido
          :}
          ;
